steps:
- script: |
   az login --service-principal -u $(SPN-ID) -p $(SPN-SECRET) --tenant $(TENANT-ID)
   ACCESS_KEY=`az storage account keys list -n $(STORAGE_ACCT) -o json | jq -r '.[0].value'`
   echo "##vso[task.setvariable variable=ACCESS_KEY]$ACCESS_KEY"
  displayName: 'AZ Login and Set ACCESS_KEY'
  
- script: |
   cat << EOT >> terraform.tfvars
   access_key = "$(ACCESS_KEY)"
   tenant_id = "$(TENANT-ID)"
   subscription_id = "$(SUBSCRIPTION-ID)"
   client_id = "$(SPN-ID)"
   client_secret = "$(SPN-SECRET)"
   EOT
  workingDirectory: '$(terraform.path)'
  displayName: 'Create terraform.tfvars'

- script: |
   terraform validate
  workingDirectory: '$(terraform.path)'
  displayName: 'Terraform Validate'

- script: |
   git config --global --list | grep url. | awk -F '.instead' '{print $1}' | while read line
   do
     echo $line
     git config --global --remove-section $line
   done
   git config --global url."https://ado:$(System.AccessToken)@$(AZDO_ORGANIZATION)".insteadOf https://$(AZDO_ORGANIZATION)
   git init
  displayName: 'Redirect foo git URLs to use the Access Token So Modules Can Be Pulled In'

- script: |
   terraform init -backend-config=resource_group_name=$(RES_GRP) -backend-config=storage_account_name=$(STORAGE_ACCT) -backend-config=container_name=tf-statefiles -backend-config=key=$(state.key) -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false
   terraform plan -out=tfplan -no-color -input=false
  displayName: 'Terraform Plan'
  workingDirectory: '$(terraform.path)'
   
- script: |
   git config --global --remove-section url.https://ado:$(System.AccessToken)@$(AZDO_ORGANIZATION)
  displayName: 'Remove git URL Redirect'
  continueOnError: true
  condition: always()
