steps:
- script: |
   terraform validate -check-variables=false
  workingDirectory: '$(terraform.path)'
  displayName: 'terraform validate'

- script: |
   git --version
   git config --global user.email "ado@here.com"
   git config --global user.name "ado"
   git checkout $(Build.SourceBranchName)
   git pull
   git branch -a
   git status
  displayName: 'checkout $(Build.SourceBranchName)'
  workingDirectory: '$(terraform.path)'

- script: |
   # CHECK FOR VALUES IN AZURERM PROVIDER
   # THE IF BLOCK REMOVES ALL WHITESPACE FROM $v USING ${v// } BEFORE CHECKING FOR EMPTINESS
   v=`grep -d skip -Pz --only-matching '(?<=provider "azurerm" {)(\n|.)*?(?=})' * | grep =`
   if [ -z "${v// }" ]
   then
     echo "$v FAIL: empty azurerm provider, pipeline cannot build... See https://www.terraform.io/docs/providers/azurerm/auth/service_principal_client_secret.html#configuring-the-service-principal-in-terraform"
     echo "Add this provider block to code..."
     cat << EOF
   provider "azurerm" {
     subscription_id = "${var.subscription_id}"
     client_id       = "${var.client_id}"
     client_secret   = "${var.client_secret}"
     tenant_id       = "${var.tenant_id}"
   }
   EOF
     exit 1
   else
     echo "$v SUCCESS:  azurerm provider block must not be empty before build can proceed.  See https://www.terraform.io/docs/providers/azurerm/auth/service_principal_client_secret.html#configuring-the-service-principal-in-terraform"
   fi
   # CHECK THAT variables HAVE A description
   # CURRENTLY ONLY MATCHES WHEN AT LEAST ONE description APPEARS WITH VARIABLES
   v=`grep -d skip -Pz --only-matching '(?<=variable)(\n|.)*?(?=})' * | grep description`
   if [ -z "${v// }" ]
   then
     echo "$v FAIL: Variables should have a description...  See https://$(AZDO_ORGANIZATION).visualstudio.com/Terraform/_wiki/wikis/Terraform.wiki?wikiVersion=GBwikiMaster&pagePath=%2FDevelopment%20Standards%2FTerraform%2Fv3%20Code%20Standards&anchor=variables"
     exit 1
   else
     echo "$v SUCCESS:  all variables have a description"
   fi
  workingDirectory: '$(terraform.path)'
  displayName: 'build readiness'
  enabled: false
  
- script: |
   cat <<EOT > README.md
   # $(Build.Repository.Name) - $(Build.DefinitionName)
   
   [![Build status](https://$(AZDO_ORGANIZATION).visualstudio.com/$(AZDO_PROJECT)/_apis/build/status/$(Build.Repository.Name)%20Repo/$(Build.DefinitionName))](https://$(AZDO_ORGANIZATION).visualstudio.com/$(AZDO_PROJECT)/_build/latest?definitionId=$(System.DefinitionId))
   
   ___
   
   ## Usage
   
   ADD USAGE DOCUMENTATION
   
   ___
   
   ## Inputs and Outputs
   
   _Generated with [terraform-docs](https://github.com/segmentio/terraform-docs) and [pre-commit](https://www.unixdaemon.net/tools/terraform-precommit-hooks/)_
   
   <!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
   
   <!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
   
   EOT
  workingDirectory: '$(terraform.path)'
  displayName: 'check for README.md, create if missing'

- script: |
   # NEED TO INSTALL THIS HERE UNTIL terraform-docs GETS ONTO THE AGENTS
   go get github.com/segmentio/terraform-docs
   echo "PATH => $PATH"
   echo "GOPATH => $GOPATH"
   #sudo ln -sf ~/go/bin/terraform-docs /usr/local/bin/terraform-docs
  workingDirectory: '$(terraform.path)'
  displayName: 'install terraform-docs'

- script: |
   #sudo apt-get update
   #sudo apt-get install -y python-setuptools
   echo "Installing wheel"
   sudo pip install wheel
   echo "Installing pre-commit pip package"
   sudo pip install pre-commit
   cat <<EOF > .pre-commit-config.yaml
   - repo: git://github.com/antonbabenko/pre-commit-terraform
     rev: v1.8.1
     hooks:
       - id: terraform_fmt
       - id: terraform_docs
       - id: terraform_validate_no_variables
   EOF
   git add .pre-commit-config.yaml
   pre-commit autoupdate
  displayName: 'Install and Configure pre-commit-terraform'
  
- script: |
   echo "pre-commit run --files *"
   pre-commit run --files *
   if [ "$?" -eq "1" ]
   then
     echo "... second pre-commit attempt ..."
     pre-commit run --files *
   fi
  displayName: 'Run pre-commit-terraform on $(terraform.path)'
  workingDirectory: '$(terraform.path)'
  failOnStderr: false
  continueOnError: true

- script: |
    if [[ -z $(git ls-files --modified )  ]]; then
      set PRECOMMIT_CHANGES_BRANCH=pre-commit-terraform/$(Build.Id)
      echo "committing cleanup changes by terraform pre-commit hook to $PRECOMMIT_CHANGES_BRANCH"
      git git checkout -b pre-commit-terraform/$(Build.Id)
      git add .
      git commit -am 'code readiness - linting, formatting, docs [***NO_CI***]'
      git push
    else
      echo "No changes by terraform pre-commit hooks."
    fi
  displayName: 'commit code corrections to a new branch'
  workingDirectory: '$(terraform.path)'
  continueOnError: true

